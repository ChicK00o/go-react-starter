{"version":3,"sources":["features/responseDisplay/jsonSlice.ts","websocket/websocketProvider.tsx","features/responseDisplay/ResponseJson.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["jsonHolder","createSlice","name","initialState","value","reducers","jsonResponse","state","payload","log","actions","getPing","a","axios","get","data","getClose","WebSocketContext","createContext","WebSocketProvider","webSocket","ws","children","dispatch","useDispatch","WebSocket","onmessage","ev","JSON","parse","onopen","onclose","event","onerror","error","sendMessage","message","type","send","stringify","Provider","ResponseJson","useSelector","useState","undefined","intervalRef","setIntervalRef","useEffect","clearInterval","onStopRefresh","setData","useContext","src","theme","onClick","setInterval","response","request","onSubmit","preventDefault","onChange","target","App","className","rootReducer","combineReducers","jsonHolderReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a073ccb.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppThunk} from \"../../app/store\";\nimport axios from 'axios';\nimport * as log from 'loglevel';\n\ninterface JsonHolder {\n    value: any\n}\n\n\nconst initialState: JsonHolder = {\n    value: {},\n};\n\nconst jsonHolder = createSlice({\n    name: 'jsonHolder',\n    initialState,\n    reducers: {\n        jsonResponse(state, {payload}: PayloadAction<any>) {\n            log.debug(payload);\n            state.value = payload;\n        },\n    }\n});\n\nexport const {\n    jsonResponse,\n} = jsonHolder.actions;\n\nexport default jsonHolder.reducer\n\nexport const pingBackend = ():\n    AppThunk => async dispatch => {\n    try {\n        const data = await getPing();\n        dispatch(jsonResponse(data));\n    } catch (err) {\n        if (err.response) {\n            dispatch(jsonResponse(err.response));\n        } else if (err.request) {\n            dispatch(jsonResponse(err.request));\n        } else {\n            dispatch(jsonResponse(err));\n        }\n    }\n};\n\ninterface PingResponse {\n    payload: any\n}\n\nasync function getPing() {\n    const url = \"http://127.0.0.1:5000/ping\";\n    const {data} = await axios.get<PingResponse>(url);\n    return data\n}\n\nexport const closeBackend = ():\n    AppThunk => async dispatch => {\n    try {\n        const data = await getClose();\n        dispatch(jsonResponse(data));\n    } catch (err) {\n        if (err.response) {\n            dispatch(jsonResponse(err.response));\n        } else if (err.request) {\n            dispatch(jsonResponse(err.request));\n        } else {\n            dispatch(jsonResponse(err));\n        }\n    }\n};\n\nasync function getClose() {\n    const url = \"http://127.0.0.1:5000/api/close\";\n    const {data} = await axios.get<PingResponse>(url);\n    return data\n}\n","import React, { createContext, PropsWithChildren, ReactNode } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { jsonResponse } from 'features/responseDisplay/jsonSlice';\nimport * as log from 'loglevel';\n\nconst WebSocketContext = createContext<Websocket | null>(null);\n\nexport { WebSocketContext }\n\ninterface Websocket {\n    webSocket : WebSocket,\n    sendMessage : (message: string) => void\n}\n\nconst WebSocketProvider = ({children} : PropsWithChildren<ReactNode>) => {\n    let webSocket : WebSocket;\n    let ws : Websocket;\n\n    const dispatch = useDispatch();\n\n    const sendMessage = (message : string) => {\n        const payload = {\n            type: \"sendMessage\",\n            data: message\n        };\n        webSocket.send(JSON.stringify(payload))\n        // dispatch(updateChatLog(payload));\n    };\n\n\n    webSocket = new WebSocket(\"ws://127.0.0.1:5000/api/ws\");\n    webSocket.onmessage = ev => {\n        const payload = JSON.parse(ev.data);\n        dispatch(jsonResponse(payload));\n    };\n\n    webSocket.onopen = () => {\n        log.warn(\"Websocket is now open\");\n    };\n\n    webSocket.onclose = event => {\n        log.warn(\"Socket Closed Connection: \", event);\n    };\n\n    webSocket.onerror = error => {\n        log.error(\"Socket Error: \", error);\n    };\n\n    ws = {\n        webSocket: webSocket,\n        sendMessage\n    };\n\n\n    return (\n        <WebSocketContext.Provider value={ws}>\n            {children}\n        </WebSocketContext.Provider>\n    )\n};\n\nexport default WebSocketProvider;\n","import React, {FormEvent, useContext, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../app/rootReducer\";\nimport ReactJson from \"react-json-view\";\nimport {closeBackend, pingBackend} from \"./jsonSlice\";\nimport {ChangeHandler} from \"../../utilities/types\";\nimport {WebSocketContext} from \"../../websocket/websocketProvider\";\n\nconst ResponseJson = () => {\n    const dispatch = useDispatch();\n\n    const {value} = useSelector(\n        (state: RootState) => state.jsonHolder\n    );\n\n    const [intervalRef, setIntervalRef] = useState<NodeJS.Timeout | undefined>(undefined);\n\n    useEffect(() => {\n        return () => {\n            if (intervalRef !== undefined) {\n                clearInterval(intervalRef);\n            }\n        }\n    }, [intervalRef]);\n\n    const onPingServer = () => {\n        if (intervalRef === undefined) {\n            setIntervalRef(setInterval(() => {\n                dispatch(pingBackend());\n            }, 1000))\n        }\n    };\n\n    const onCloseServer = () => {\n        onStopRefresh();\n        dispatch(closeBackend());\n    };\n\n\n    const onStopRefresh = () => {\n        if (intervalRef !== undefined) {\n            clearInterval(intervalRef);\n            setIntervalRef(undefined)\n        }\n    };\n\n    const [data, setData] = useState(\"not set\");\n    const handleChange: ChangeHandler = event => {\n        const {value} = event.target;\n        setData(value);\n    };\n\n    const ws = useContext(WebSocketContext);\n    const onFormSubmit = (event: FormEvent) => {\n        event.preventDefault();\n        ws?.sendMessage(data)\n    };\n\n    return (\n        <div>\n            <div>\n                <ReactJson src={value} theme=\"solarized\"/>\n                <button onClick={onPingServer}>Start</button>\n                <button onClick={onStopRefresh}>Stop Refresh</button>\n            </div>\n            <form onSubmit={onFormSubmit}>\n                <label>Message Backend</label>\n                <input value={data} onChange={handleChange}/>\n                <button type=\"submit\">Send over websocket</button>\n            </form>\n            <div>\n                <label>To Close Backend server</label>\n                <button onClick={onCloseServer}>Close</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ResponseJson;\n","import React from 'react';\nimport ResponseJson from \"../features/responseDisplay/ResponseJson\";\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"container\">\n            <div className=\"container\">\n                <h1>Response</h1>\n                <p>API Response for reading</p>\n                <ResponseJson />\n            </div>\n        </div>\n    )\n};\n\nexport default App\n","import { combineReducers } from \"@reduxjs/toolkit\"\nimport jsonHolderReducer from 'features/responseDisplay/jsonSlice'\n\nconst rootReducer = combineReducers({\n    jsonHolder: jsonHolderReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import {Action, configureStore, ThunkAction} from \"@reduxjs/toolkit\";\nimport rootReducer, {RootState} from \"./rootReducer\";\n\nconst store = configureStore({\n    reducer: rootReducer\n});\n\nexport type AppDispatch =  typeof store.dispatch\n\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport './index.css'\nimport store from \"./app/store\";\nimport {Provider} from 'react-redux'\nimport WebSocketProvider from \"./websocket/websocketProvider\";\n\nconst render = () => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <WebSocketProvider>\n                <App/>\n            </WebSocketProvider>\n        </Provider>,\n        document.getElementById('root')\n    )\n};\n\nrender();\n"],"sourceRoot":""}