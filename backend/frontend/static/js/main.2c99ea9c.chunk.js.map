{"version":3,"sources":["features/responseDisplay/jsonSlice.ts","websocket/websocketMessageHandler.ts","websocket/websocketProvider.tsx","features/responseDisplay/ResponseJson.tsx","features/responseDisplay/ConfigJson.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["jsonHolder","createSlice","name","initialState","value","config","reducers","jsonResponse","state","payload","log","configResponse","actions","getClose","a","axios","get","data","doThis","getApi","dispatch","response","request","WebSocketContext","createContext","WebSocketProvider","webSocket","ws","children","useDispatch","WebSocket","onmessage","ev","rawPayload","JSON","parse","undefined","type","debug","body","receivedMessageHandler","onopen","onclose","event","onerror","error","sendMessage","message","websocket","send","stringify","sendMessageHandler","Provider","ResponseJson","useSelector","useState","setData","useContext","src","theme","onClick","onSubmit","preventDefault","onChange","target","ConfigJson","onEdit","edit","existing_value","new_value","warn","updated_src","App","className","rootReducer","combineReducers","jsonHolderReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c99ea9c.chunk.js","sourcesContent":["import {Action, createSlice, PayloadAction, ThunkDispatch} from \"@reduxjs/toolkit\";\nimport {AppThunk} from \"../../app/store\";\nimport axios from 'axios';\nimport * as log from 'loglevel';\nimport {RootState} from \"../../app/rootReducer\";\nimport {PORT} from \"../../constants\";\n\ninterface JsonHolder {\n    value: any\n    config: any\n}\n\nconst initialState: JsonHolder = {\n    value: {},\n    config: {},\n};\n\nconst jsonHolder = createSlice({\n    name: 'jsonHolder',\n    initialState,\n    reducers: {\n        jsonResponse(state, {payload}: PayloadAction<any>) {\n            log.debug(payload);\n            state.value = payload;\n        },\n        configResponse(state, {payload}: PayloadAction<any>) {\n            log.debug(payload);\n            state.config = payload;\n        },\n    }\n});\n\nexport const {\n    jsonResponse,\n    configResponse,\n} = jsonHolder.actions;\n\nexport default jsonHolder.reducer\n\nexport const pingBackend = ():\n    AppThunk => async dispatch => {\n    await doThis(getPing, dispatch);\n};\n\ninterface PingResponse {\n    payload: any\n}\n\nasync function getPing() {\n    const url = \"http://127.0.0.1:\" + PORT + \"/api/data\";\n    const {data} = await axios.get<PingResponse>(url);\n    return data\n}\n\nexport const closeBackend = ():\n    AppThunk => async dispatch => {\n    await doThis(getClose, dispatch);\n};\n\nasync function getClose() {\n    const url = \"http://127.0.0.1:\" + PORT + \"/api/close\";\n    const {data} = await axios.get<PingResponse>(url);\n    return data\n}\n\nasync function doThis(getApi: () => Promise<any>, dispatch: ThunkDispatch<RootState, unknown, Action<string>>) {\n    try {\n        const data = await getApi();\n        dispatch(jsonResponse(data));\n    } catch (err) {\n        if (err.response) {\n            dispatch(jsonResponse(err.response));\n        } else if (err.request) {\n            dispatch(jsonResponse(err.request));\n        } else {\n            dispatch(jsonResponse(err));\n        }\n    }\n}\n","import {Action, ThunkDispatch} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../app/rootReducer\";\nimport {jsonResponse, configResponse} from \"../features/responseDisplay/jsonSlice\";\nimport log from \"loglevel\";\n\ninterface Message {\n    body: any,\n    type: string,\n}\n\nexport const sendMessageHandler = (websocket: WebSocket, type: string, message: any) => {\n    let data: Message = {\n        type: type,\n        body: message\n    };\n    websocket.send(JSON.stringify(data))\n};\n\nexport const receivedMessageHandler = (data: any, dispatch: ThunkDispatch<RootState, unknown, Action<string>>) => {\n    const rawPayload = JSON.parse(data);\n    const payload = rawPayload as Message;\n    if (payload !== undefined) {\n        switch (payload.type) {\n            case \"display\": {\n                log.debug(payload.type + \" : \" + payload.body);\n                // const value = payload.body as DisplayResponse;\n                // dispatch(displayResponse(value));\n                dispatch(jsonResponse(payload));\n                break;\n            }\n            case \"config\": {\n                dispatch(configResponse(payload.body));\n                break;\n            }\n            case \"ping_pong\":\n            case \"system\":\n            default: {\n                log.debug(payload.type + \" : \" + payload.body);\n                dispatch(jsonResponse(payload));\n                break;\n            }\n        }\n    } else {\n        dispatch(jsonResponse(rawPayload));\n    }\n};\n","import React, {createContext, PropsWithChildren, ReactNode} from 'react'\nimport {useDispatch} from 'react-redux';\nimport * as log from 'loglevel';\nimport {receivedMessageHandler, sendMessageHandler} from \"./websocketMessageHandler\";\nimport {PORT} from \"../constants\";\n\nconst WebSocketContext = createContext<Websocket | null>(null);\n\nexport {WebSocketContext}\n\ninterface Websocket {\n    webSocket: WebSocket,\n    sendMessage: (type: string, message: any) => void\n}\n\nconst WebSocketProvider = ({children}: PropsWithChildren<ReactNode>) => {\n    let webSocket: WebSocket;\n    let ws: Websocket;\n\n    const dispatch = useDispatch();\n\n    const sendMessage = (type: string, message: any) => {\n        sendMessageHandler(webSocket, type, message);\n    };\n\n    webSocket = new WebSocket(\"ws://127.0.0.1:\" + PORT + \"/api/ws\");\n    webSocket.onmessage = ev => {\n        receivedMessageHandler(ev.data, dispatch);\n    };\n\n    webSocket.onopen = () => {\n        log.warn(\"Websocket is now open\");\n    };\n\n    webSocket.onclose = event => {\n        log.warn(\"Socket Closed Connection: \", event);\n    };\n\n    webSocket.onerror = error => {\n        log.error(\"Socket Error: \", error);\n    };\n\n    ws = {\n        webSocket: webSocket,\n        sendMessage\n    };\n\n\n    return (\n        <WebSocketContext.Provider value={ws}>\n            {children}\n        </WebSocketContext.Provider>\n    )\n};\n\nexport default WebSocketProvider;\n","import React, {FormEvent, useContext, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../app/rootReducer\";\nimport ReactJson from \"react-json-view\";\nimport {closeBackend} from \"./jsonSlice\";\nimport {ChangeHandler} from \"../../utilities/types\";\nimport {WebSocketContext} from \"../../websocket/websocketProvider\";\n\nconst ResponseJson = () => {\n    const dispatch = useDispatch();\n\n    const {value} = useSelector(\n        (state: RootState) => state.jsonHolder\n    );\n\n    const onPingServer = () => {\n        // dispatch(pingBackend());\n        ws?.sendMessage(\"data\", {})\n    };\n\n    const onCloseServer = () => {\n        dispatch(closeBackend());\n    };\n\n    const [data, setData] = useState(\"not set\");\n    const handleChange: ChangeHandler = event => {\n        const {value} = event.target;\n        setData(value);\n    };\n\n    const ws = useContext(WebSocketContext);\n    const onFormSubmit = (event: FormEvent) => {\n        event.preventDefault();\n        ws?.sendMessage(\"user\", data)\n    };\n\n    return (\n        <div>\n            <div>\n                <ReactJson src={value} theme=\"solarized\"/>\n                <button onClick={onPingServer}>Get Data</button>\n            </div>\n            <form onSubmit={onFormSubmit}>\n                <label>Message Backend</label>\n                <input value={data} onChange={handleChange}/>\n                <button type=\"submit\">Send over websocket</button>\n            </form>\n            <div>\n                <label>To Close Backend server</label>\n                <button onClick={onCloseServer}>Close</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ResponseJson;\n","import React, {useContext} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../app/rootReducer\";\nimport ReactJson from \"react-json-view\";\nimport {WebSocketContext} from \"../../websocket/websocketProvider\";\nimport log from \"loglevel\";\n\nconst ConfigJson = () => {\n\n    const {config} = useSelector(\n        (state: RootState) => state.jsonHolder\n    );\n\n    const ws = useContext(WebSocketContext);\n\n    return (\n        <div>\n            <ReactJson\n                src={config}\n                theme=\"solarized\"\n                onEdit={edit => {\n                    if ((typeof edit.existing_value) !== (typeof edit.new_value)) {\n                        log.warn(edit);\n                        return false\n                    } else {\n                        log.warn(typeof edit.existing_value);\n                        log.warn(typeof edit.new_value);\n                        log.warn(edit);\n                        ws?.sendMessage(\"config\", edit.updated_src);\n                    }\n                }}\n            />\n        </div>\n    );\n};\n\nexport default ConfigJson;\n","import React from 'react';\nimport ResponseJson from \"../features/responseDisplay/ResponseJson\";\nimport ConfigJson from \"../features/responseDisplay/ConfigJson\";\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"container\">\n            <div className=\"container\">\n                <h1>Response</h1>\n                <p>API Response for reading</p>\n                <ResponseJson />\n                <p>App Config</p>\n                <ConfigJson />\n            </div>\n        </div>\n    )\n};\n\nexport default App\n","import { combineReducers } from \"@reduxjs/toolkit\"\nimport jsonHolderReducer from 'features/responseDisplay/jsonSlice'\n\nconst rootReducer = combineReducers({\n    jsonHolder: jsonHolderReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import {Action, configureStore, ThunkAction} from \"@reduxjs/toolkit\";\nimport rootReducer, {RootState} from \"./rootReducer\";\n\nconst store = configureStore({\n    reducer: rootReducer\n});\n\nexport type AppDispatch =  typeof store.dispatch\n\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport './index.css'\nimport store from \"./app/store\";\nimport {Provider} from 'react-redux'\nimport WebSocketProvider from \"./websocket/websocketProvider\";\n\nconst render = () => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <WebSocketProvider>\n                <App/>\n            </WebSocketProvider>\n        </Provider>,\n        document.getElementById('root')\n    )\n};\n\nrender();\n"],"sourceRoot":""}